// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: dto.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "com.spectrum.crimson.proto";

export interface Token {
  accessToken: string;
  refreshToken: string;
}

export interface PlaceGroup {
  id: string;
  name: string;
  status: PlaceGroup_PlaceGroupStatus;
  category: PlaceGroup_PlaceGroupCategory;
  memo: string;
  link: string;
  icon: string;
  createdAt: number;
  updatedAt: number;
}

export enum PlaceGroup_PlaceGroupStatus {
  PUBLIC = 0,
  PRIVATE = 1,
  UNRECOGNIZED = -1,
}

export function placeGroup_PlaceGroupStatusFromJSON(object: any): PlaceGroup_PlaceGroupStatus {
  switch (object) {
    case 0:
    case "PUBLIC":
      return PlaceGroup_PlaceGroupStatus.PUBLIC;
    case 1:
    case "PRIVATE":
      return PlaceGroup_PlaceGroupStatus.PRIVATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlaceGroup_PlaceGroupStatus.UNRECOGNIZED;
  }
}

export function placeGroup_PlaceGroupStatusToJSON(object: PlaceGroup_PlaceGroupStatus): string {
  switch (object) {
    case PlaceGroup_PlaceGroupStatus.PUBLIC:
      return "PUBLIC";
    case PlaceGroup_PlaceGroupStatus.PRIVATE:
      return "PRIVATE";
    case PlaceGroup_PlaceGroupStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PlaceGroup_PlaceGroupCategory {
  DATE = 0,
  FAMILY = 1,
  UNRECOGNIZED = -1,
}

export function placeGroup_PlaceGroupCategoryFromJSON(object: any): PlaceGroup_PlaceGroupCategory {
  switch (object) {
    case 0:
    case "DATE":
      return PlaceGroup_PlaceGroupCategory.DATE;
    case 1:
    case "FAMILY":
      return PlaceGroup_PlaceGroupCategory.FAMILY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlaceGroup_PlaceGroupCategory.UNRECOGNIZED;
  }
}

export function placeGroup_PlaceGroupCategoryToJSON(object: PlaceGroup_PlaceGroupCategory): string {
  switch (object) {
    case PlaceGroup_PlaceGroupCategory.DATE:
      return "DATE";
    case PlaceGroup_PlaceGroupCategory.FAMILY:
      return "FAMILY";
    case PlaceGroup_PlaceGroupCategory.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface KakaoPlace {
  id: string;
  name: string;
  categoryName: string;
  categoryGroupCode: string;
  categoryGroupName: string;
  phone: string;
  addressName: string;
  roadAddressName: string;
  x: string;
  y: string;
  url: string;
}

function createBaseToken(): Token {
  return { accessToken: "", refreshToken: "" };
}

export const Token: MessageFns<Token> = {
  encode(message: Token, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessToken !== "") {
      writer.uint32(10).string(message.accessToken);
    }
    if (message.refreshToken !== "") {
      writer.uint32(18).string(message.refreshToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Token {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseToken();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessToken = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.refreshToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Token {
    return {
      accessToken: isSet(object.accessToken) ? globalThis.String(object.accessToken) : "",
      refreshToken: isSet(object.refreshToken) ? globalThis.String(object.refreshToken) : "",
    };
  },

  toJSON(message: Token): unknown {
    const obj: any = {};
    if (message.accessToken !== "") {
      obj.accessToken = message.accessToken;
    }
    if (message.refreshToken !== "") {
      obj.refreshToken = message.refreshToken;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Token>, I>>(base?: I): Token {
    return Token.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Token>, I>>(object: I): Token {
    const message = createBaseToken();
    message.accessToken = object.accessToken ?? "";
    message.refreshToken = object.refreshToken ?? "";
    return message;
  },
};

function createBasePlaceGroup(): PlaceGroup {
  return { id: "", name: "", status: 0, category: 0, memo: "", link: "", icon: "", createdAt: 0, updatedAt: 0 };
}

export const PlaceGroup: MessageFns<PlaceGroup> = {
  encode(message: PlaceGroup, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.category !== 0) {
      writer.uint32(32).int32(message.category);
    }
    if (message.memo !== "") {
      writer.uint32(42).string(message.memo);
    }
    if (message.link !== "") {
      writer.uint32(50).string(message.link);
    }
    if (message.icon !== "") {
      writer.uint32(778).string(message.icon);
    }
    if (message.createdAt !== 0) {
      writer.uint32(784).uint64(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      writer.uint32(792).uint64(message.updatedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceGroup {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceGroup();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.category = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.memo = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.link = reader.string();
          continue;
        }
        case 97: {
          if (tag !== 778) {
            break;
          }

          message.icon = reader.string();
          continue;
        }
        case 98: {
          if (tag !== 784) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
        case 99: {
          if (tag !== 792) {
            break;
          }

          message.updatedAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceGroup {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      status: isSet(object.status) ? placeGroup_PlaceGroupStatusFromJSON(object.status) : 0,
      category: isSet(object.category) ? placeGroup_PlaceGroupCategoryFromJSON(object.category) : 0,
      memo: isSet(object.memo) ? globalThis.String(object.memo) : "",
      link: isSet(object.link) ? globalThis.String(object.link) : "",
      icon: isSet(object.icon) ? globalThis.String(object.icon) : "",
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
      updatedAt: isSet(object.updatedAt) ? globalThis.Number(object.updatedAt) : 0,
    };
  },

  toJSON(message: PlaceGroup): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.status !== 0) {
      obj.status = placeGroup_PlaceGroupStatusToJSON(message.status);
    }
    if (message.category !== 0) {
      obj.category = placeGroup_PlaceGroupCategoryToJSON(message.category);
    }
    if (message.memo !== "") {
      obj.memo = message.memo;
    }
    if (message.link !== "") {
      obj.link = message.link;
    }
    if (message.icon !== "") {
      obj.icon = message.icon;
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    if (message.updatedAt !== 0) {
      obj.updatedAt = Math.round(message.updatedAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceGroup>, I>>(base?: I): PlaceGroup {
    return PlaceGroup.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceGroup>, I>>(object: I): PlaceGroup {
    const message = createBasePlaceGroup();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.status = object.status ?? 0;
    message.category = object.category ?? 0;
    message.memo = object.memo ?? "";
    message.link = object.link ?? "";
    message.icon = object.icon ?? "";
    message.createdAt = object.createdAt ?? 0;
    message.updatedAt = object.updatedAt ?? 0;
    return message;
  },
};

function createBaseKakaoPlace(): KakaoPlace {
  return {
    id: "",
    name: "",
    categoryName: "",
    categoryGroupCode: "",
    categoryGroupName: "",
    phone: "",
    addressName: "",
    roadAddressName: "",
    x: "",
    y: "",
    url: "",
  };
}

export const KakaoPlace: MessageFns<KakaoPlace> = {
  encode(message: KakaoPlace, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.categoryName !== "") {
      writer.uint32(26).string(message.categoryName);
    }
    if (message.categoryGroupCode !== "") {
      writer.uint32(34).string(message.categoryGroupCode);
    }
    if (message.categoryGroupName !== "") {
      writer.uint32(42).string(message.categoryGroupName);
    }
    if (message.phone !== "") {
      writer.uint32(50).string(message.phone);
    }
    if (message.addressName !== "") {
      writer.uint32(58).string(message.addressName);
    }
    if (message.roadAddressName !== "") {
      writer.uint32(66).string(message.roadAddressName);
    }
    if (message.x !== "") {
      writer.uint32(74).string(message.x);
    }
    if (message.y !== "") {
      writer.uint32(82).string(message.y);
    }
    if (message.url !== "") {
      writer.uint32(90).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KakaoPlace {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKakaoPlace();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.categoryName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.categoryGroupCode = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.categoryGroupName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.phone = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.addressName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.roadAddressName = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.x = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.y = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KakaoPlace {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      categoryName: isSet(object.categoryName) ? globalThis.String(object.categoryName) : "",
      categoryGroupCode: isSet(object.categoryGroupCode) ? globalThis.String(object.categoryGroupCode) : "",
      categoryGroupName: isSet(object.categoryGroupName) ? globalThis.String(object.categoryGroupName) : "",
      phone: isSet(object.phone) ? globalThis.String(object.phone) : "",
      addressName: isSet(object.addressName) ? globalThis.String(object.addressName) : "",
      roadAddressName: isSet(object.roadAddressName) ? globalThis.String(object.roadAddressName) : "",
      x: isSet(object.x) ? globalThis.String(object.x) : "",
      y: isSet(object.y) ? globalThis.String(object.y) : "",
      url: isSet(object.url) ? globalThis.String(object.url) : "",
    };
  },

  toJSON(message: KakaoPlace): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.categoryName !== "") {
      obj.categoryName = message.categoryName;
    }
    if (message.categoryGroupCode !== "") {
      obj.categoryGroupCode = message.categoryGroupCode;
    }
    if (message.categoryGroupName !== "") {
      obj.categoryGroupName = message.categoryGroupName;
    }
    if (message.phone !== "") {
      obj.phone = message.phone;
    }
    if (message.addressName !== "") {
      obj.addressName = message.addressName;
    }
    if (message.roadAddressName !== "") {
      obj.roadAddressName = message.roadAddressName;
    }
    if (message.x !== "") {
      obj.x = message.x;
    }
    if (message.y !== "") {
      obj.y = message.y;
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KakaoPlace>, I>>(base?: I): KakaoPlace {
    return KakaoPlace.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KakaoPlace>, I>>(object: I): KakaoPlace {
    const message = createBaseKakaoPlace();
    message.id = object.id ?? "";
    message.name = object.name ?? "";
    message.categoryName = object.categoryName ?? "";
    message.categoryGroupCode = object.categoryGroupCode ?? "";
    message.categoryGroupName = object.categoryGroupName ?? "";
    message.phone = object.phone ?? "";
    message.addressName = object.addressName ?? "";
    message.roadAddressName = object.roadAddressName ?? "";
    message.x = object.x ?? "";
    message.y = object.y ?? "";
    message.url = object.url ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
