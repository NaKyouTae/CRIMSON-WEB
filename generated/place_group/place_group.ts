// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: place_group/place_group.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PlaceGroup } from "../dto";

export const protobufPackage = "com.spectrum.crimson.proto.place_group";

export interface PlaceGroupCreateRequest {
  name: string;
  status: PlaceGroupCreateRequest_Status;
  category: PlaceGroupCreateRequest_Category;
  memo: string;
  link: string;
}

export enum PlaceGroupCreateRequest_Status {
  STATUS_UNKNOWN = 0,
  PUBLIC = 1,
  PRIVATE = 2,
  UNRECOGNIZED = -1,
}

export function placeGroupCreateRequest_StatusFromJSON(object: any): PlaceGroupCreateRequest_Status {
  switch (object) {
    case 0:
    case "STATUS_UNKNOWN":
      return PlaceGroupCreateRequest_Status.STATUS_UNKNOWN;
    case 1:
    case "PUBLIC":
      return PlaceGroupCreateRequest_Status.PUBLIC;
    case 2:
    case "PRIVATE":
      return PlaceGroupCreateRequest_Status.PRIVATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlaceGroupCreateRequest_Status.UNRECOGNIZED;
  }
}

export function placeGroupCreateRequest_StatusToJSON(object: PlaceGroupCreateRequest_Status): string {
  switch (object) {
    case PlaceGroupCreateRequest_Status.STATUS_UNKNOWN:
      return "STATUS_UNKNOWN";
    case PlaceGroupCreateRequest_Status.PUBLIC:
      return "PUBLIC";
    case PlaceGroupCreateRequest_Status.PRIVATE:
      return "PRIVATE";
    case PlaceGroupCreateRequest_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum PlaceGroupCreateRequest_Category {
  CATEGORY_UNKOWN = 0,
  DATE = 1,
  FAMILY = 2,
  UNRECOGNIZED = -1,
}

export function placeGroupCreateRequest_CategoryFromJSON(object: any): PlaceGroupCreateRequest_Category {
  switch (object) {
    case 0:
    case "CATEGORY_UNKOWN":
      return PlaceGroupCreateRequest_Category.CATEGORY_UNKOWN;
    case 1:
    case "DATE":
      return PlaceGroupCreateRequest_Category.DATE;
    case 2:
    case "FAMILY":
      return PlaceGroupCreateRequest_Category.FAMILY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlaceGroupCreateRequest_Category.UNRECOGNIZED;
  }
}

export function placeGroupCreateRequest_CategoryToJSON(object: PlaceGroupCreateRequest_Category): string {
  switch (object) {
    case PlaceGroupCreateRequest_Category.CATEGORY_UNKOWN:
      return "CATEGORY_UNKOWN";
    case PlaceGroupCreateRequest_Category.DATE:
      return "DATE";
    case PlaceGroupCreateRequest_Category.FAMILY:
      return "FAMILY";
    case PlaceGroupCreateRequest_Category.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PlaceGroupCreateResponse {
  id: string;
}

export interface PlaceGroupResult {
  group?: PlaceGroup | undefined;
}

export interface PlaceGroupListResult {
  groups: PlaceGroup[];
}

function createBasePlaceGroupCreateRequest(): PlaceGroupCreateRequest {
  return { name: "", status: 0, category: 0, memo: "", link: "" };
}

export const PlaceGroupCreateRequest: MessageFns<PlaceGroupCreateRequest> = {
  encode(message: PlaceGroupCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.category !== 0) {
      writer.uint32(24).int32(message.category);
    }
    if (message.memo !== "") {
      writer.uint32(34).string(message.memo);
    }
    if (message.link !== "") {
      writer.uint32(42).string(message.link);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceGroupCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceGroupCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.category = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.memo = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.link = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceGroupCreateRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      status: isSet(object.status) ? placeGroupCreateRequest_StatusFromJSON(object.status) : 0,
      category: isSet(object.category) ? placeGroupCreateRequest_CategoryFromJSON(object.category) : 0,
      memo: isSet(object.memo) ? globalThis.String(object.memo) : "",
      link: isSet(object.link) ? globalThis.String(object.link) : "",
    };
  },

  toJSON(message: PlaceGroupCreateRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.status !== 0) {
      obj.status = placeGroupCreateRequest_StatusToJSON(message.status);
    }
    if (message.category !== 0) {
      obj.category = placeGroupCreateRequest_CategoryToJSON(message.category);
    }
    if (message.memo !== "") {
      obj.memo = message.memo;
    }
    if (message.link !== "") {
      obj.link = message.link;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceGroupCreateRequest>, I>>(base?: I): PlaceGroupCreateRequest {
    return PlaceGroupCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceGroupCreateRequest>, I>>(object: I): PlaceGroupCreateRequest {
    const message = createBasePlaceGroupCreateRequest();
    message.name = object.name ?? "";
    message.status = object.status ?? 0;
    message.category = object.category ?? 0;
    message.memo = object.memo ?? "";
    message.link = object.link ?? "";
    return message;
  },
};

function createBasePlaceGroupCreateResponse(): PlaceGroupCreateResponse {
  return { id: "" };
}

export const PlaceGroupCreateResponse: MessageFns<PlaceGroupCreateResponse> = {
  encode(message: PlaceGroupCreateResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceGroupCreateResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceGroupCreateResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceGroupCreateResponse {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: PlaceGroupCreateResponse): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceGroupCreateResponse>, I>>(base?: I): PlaceGroupCreateResponse {
    return PlaceGroupCreateResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceGroupCreateResponse>, I>>(object: I): PlaceGroupCreateResponse {
    const message = createBasePlaceGroupCreateResponse();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasePlaceGroupResult(): PlaceGroupResult {
  return { group: undefined };
}

export const PlaceGroupResult: MessageFns<PlaceGroupResult> = {
  encode(message: PlaceGroupResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.group !== undefined) {
      PlaceGroup.encode(message.group, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceGroupResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceGroupResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.group = PlaceGroup.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceGroupResult {
    return { group: isSet(object.group) ? PlaceGroup.fromJSON(object.group) : undefined };
  },

  toJSON(message: PlaceGroupResult): unknown {
    const obj: any = {};
    if (message.group !== undefined) {
      obj.group = PlaceGroup.toJSON(message.group);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceGroupResult>, I>>(base?: I): PlaceGroupResult {
    return PlaceGroupResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceGroupResult>, I>>(object: I): PlaceGroupResult {
    const message = createBasePlaceGroupResult();
    message.group = (object.group !== undefined && object.group !== null)
      ? PlaceGroup.fromPartial(object.group)
      : undefined;
    return message;
  },
};

function createBasePlaceGroupListResult(): PlaceGroupListResult {
  return { groups: [] };
}

export const PlaceGroupListResult: MessageFns<PlaceGroupListResult> = {
  encode(message: PlaceGroupListResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.groups) {
      PlaceGroup.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceGroupListResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceGroupListResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.groups.push(PlaceGroup.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceGroupListResult {
    return {
      groups: globalThis.Array.isArray(object?.groups) ? object.groups.map((e: any) => PlaceGroup.fromJSON(e)) : [],
    };
  },

  toJSON(message: PlaceGroupListResult): unknown {
    const obj: any = {};
    if (message.groups?.length) {
      obj.groups = message.groups.map((e) => PlaceGroup.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceGroupListResult>, I>>(base?: I): PlaceGroupListResult {
    return PlaceGroupListResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceGroupListResult>, I>>(object: I): PlaceGroupListResult {
    const message = createBasePlaceGroupListResult();
    message.groups = object.groups?.map((e) => PlaceGroup.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
