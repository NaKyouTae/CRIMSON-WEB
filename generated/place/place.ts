// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: place/place.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { KakaoPlace, Place } from "../dto";

export const protobufPackage = "com.spectrum.crimson.proto.place";

export interface PlaceCreateRequest {
  placeGroupId: string;
  place?: KakaoPlace | undefined;
}

export interface PlaceCreateResult {
  id: string;
}

export interface PlaceListResult {
  places: Place[];
}

function createBasePlaceCreateRequest(): PlaceCreateRequest {
  return { placeGroupId: "", place: undefined };
}

export const PlaceCreateRequest: MessageFns<PlaceCreateRequest> = {
  encode(message: PlaceCreateRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.placeGroupId !== "") {
      writer.uint32(10).string(message.placeGroupId);
    }
    if (message.place !== undefined) {
      KakaoPlace.encode(message.place, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceCreateRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceCreateRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.placeGroupId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.place = KakaoPlace.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceCreateRequest {
    return {
      placeGroupId: isSet(object.placeGroupId) ? globalThis.String(object.placeGroupId) : "",
      place: isSet(object.place) ? KakaoPlace.fromJSON(object.place) : undefined,
    };
  },

  toJSON(message: PlaceCreateRequest): unknown {
    const obj: any = {};
    if (message.placeGroupId !== "") {
      obj.placeGroupId = message.placeGroupId;
    }
    if (message.place !== undefined) {
      obj.place = KakaoPlace.toJSON(message.place);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceCreateRequest>, I>>(base?: I): PlaceCreateRequest {
    return PlaceCreateRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceCreateRequest>, I>>(object: I): PlaceCreateRequest {
    const message = createBasePlaceCreateRequest();
    message.placeGroupId = object.placeGroupId ?? "";
    message.place = (object.place !== undefined && object.place !== null)
      ? KakaoPlace.fromPartial(object.place)
      : undefined;
    return message;
  },
};

function createBasePlaceCreateResult(): PlaceCreateResult {
  return { id: "" };
}

export const PlaceCreateResult: MessageFns<PlaceCreateResult> = {
  encode(message: PlaceCreateResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceCreateResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceCreateResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceCreateResult {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: PlaceCreateResult): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceCreateResult>, I>>(base?: I): PlaceCreateResult {
    return PlaceCreateResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceCreateResult>, I>>(object: I): PlaceCreateResult {
    const message = createBasePlaceCreateResult();
    message.id = object.id ?? "";
    return message;
  },
};

function createBasePlaceListResult(): PlaceListResult {
  return { places: [] };
}

export const PlaceListResult: MessageFns<PlaceListResult> = {
  encode(message: PlaceListResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.places) {
      Place.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlaceListResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlaceListResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.places.push(Place.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlaceListResult {
    return { places: globalThis.Array.isArray(object?.places) ? object.places.map((e: any) => Place.fromJSON(e)) : [] };
  },

  toJSON(message: PlaceListResult): unknown {
    const obj: any = {};
    if (message.places?.length) {
      obj.places = message.places.map((e) => Place.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlaceListResult>, I>>(base?: I): PlaceListResult {
    return PlaceListResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlaceListResult>, I>>(object: I): PlaceListResult {
    const message = createBasePlaceListResult();
    message.places = object.places?.map((e) => Place.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
