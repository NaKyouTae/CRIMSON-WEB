// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v6.32.0
// source: place/kako_place.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { KakaoPlace } from "../dto";

export const protobufPackage = "com.spectrum.crimson.proto.place";

export interface KakaoPlaceListResult {
  places: KakaoPlace[];
}

function createBaseKakaoPlaceListResult(): KakaoPlaceListResult {
  return { places: [] };
}

export const KakaoPlaceListResult: MessageFns<KakaoPlaceListResult> = {
  encode(message: KakaoPlaceListResult, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.places) {
      KakaoPlace.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): KakaoPlaceListResult {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseKakaoPlaceListResult();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.places.push(KakaoPlace.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): KakaoPlaceListResult {
    return {
      places: globalThis.Array.isArray(object?.places) ? object.places.map((e: any) => KakaoPlace.fromJSON(e)) : [],
    };
  },

  toJSON(message: KakaoPlaceListResult): unknown {
    const obj: any = {};
    if (message.places?.length) {
      obj.places = message.places.map((e) => KakaoPlace.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<KakaoPlaceListResult>, I>>(base?: I): KakaoPlaceListResult {
    return KakaoPlaceListResult.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<KakaoPlaceListResult>, I>>(object: I): KakaoPlaceListResult {
    const message = createBaseKakaoPlaceListResult();
    message.places = object.places?.map((e) => KakaoPlace.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
